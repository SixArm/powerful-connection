#!/bin/bash
set -euf

## Program Tracking ##

program_command="poweful-connection"
program_version="1.3.0"
program_updated="2017-11-08"
program_license="GPL"
program_contact="Joel Parker Henderson (joel@joelparkerhenderson.com)"
program_variant="$program_command version $program_version updated $program_updated"

## Help Function ##

help(){
cat << DOC
This macOS script determines if we have a "powerful connection".

The phrase "powerful connection" is our nickname for when our laptop
is fully powered up, and has a good wireless connection suitable for
significant networking, such as downloading big files or streaming data.

Syntax:

    powerful-connection [whitelist file name]

Example:

    powerful-connection whitelist.txt


## Details

This script runs these checks:

  * The computer is running on AC power.
  * The battery is fully charged.
  * The CPU has available processing cycles.
  * The wifi is working.
  * The script has a list of known good SSIDs.
  * The SSID is in a list of known good SSIDs.


## Ideas

We use this script for optionally running large network jobs.
For example, we use a daily job that checks for a powerful connection,
and if so, then the job downloads any available software updates.

We use this script as a way to check if we should run streaming.
For example, we use this script to do a check when a user signs in:
if the user has a powerful connection, then we launch video streaming.


## Exit codes

  * 0: success
  * 2x: power issue
  * 20: computer power is not plugged in
  * 21: battery power is not fully charged
  * 22: processing power is not sufficient
  * 3x: connection issue
  * 30: ssid unavailable
  * 31: ssid is not in whitelist


## Configuration

Create these two files:

    ~/.config/powerful-connecton/whitelist.txt
    ~/.config/powerful-connecton/blacklist.txt

Add any SSID names that you want to either list.

Add each SSID name on its own line.


## Cron

We like using the `cron` command to schedule recurring jobs.
For example, each night we check if we have powerful wifi, 
and if so, then we upgrade our system software and apps.

Example crontab lines:

    0 0 * * * powerful-connection && nice softwareupdate --install --all
    0 1 * * * powerful-connection && nice brew upgrade --cleanup
    0 2 * * * powerful-connection && nice npm update -g

Details:

  * We use the `nice` command to run the job at lower priority.

  * We use the `softwareupdate` command to update macOS.

  * We use the `brew` command to manage many of our software tools.


## References

This script is related to these repositories:

  * https://github.com/sixarm/airport-ssid
  * https://github.com/sixarm/hostinfo-commands
  * https://github.com/sixarm/pmset-commands
  * https://github.com/sixarm/ssid-powerful
  * https://github.com/sixarm/sysctl-commands
  * https://github.com/updatecommand/update


## Disclaimers

  * This script is suitable for demonstration purposes.
  * There is no warranty, express or implied.
  * Use at your own risk.
  * Your mileage may vary. 


## Tracking

  * Command: $program_command
  * Version: $program_version
  * Updated: $program_updated
  * License: $program_license
  * Contact: $program_contact
DOC
}

##
# Helpers
#
# These functions are from our shell script style guide:
# https://github.com/sixarm/sixarm_shell_script_style_guide
##

# Tool helpers
out() { >&1 printf %s\\n "$*" ; }
err() { >&2 printf %s\\n "$*" ; }
int() { printf "%d\n" "$@" 2>/dev/null ; }

## Home helpers
log_home() { out "${LOG_HOME:=$HOME/.log}" ; }; export -f log_home;
data_home() { out "${XDG_DATA_HOME:=$HOME/.local/share}" ; }; export -f data_home;
cache_home() { out "${XDG_CACHE_HOME:=$HOME/.cache}" ; }; export -f cache_home;
config_home() { out "${XDG_CONFIG_HOME:-$HOME/.config}" ; }; export -f config_home;
runtime_home() { out "${XDG_RUNTIME_HOME:=$HOME/.runtime}" ; }; export -f runtime_home;
temp_home() { out $(mktemp -d -t "${1:-$(zid)}"); }; export -f temp_home;

## Directory helpers
log_dir() { out $(log_home) "/$program_command" ; };
data_dir() { out $(data_home) "/$program_command" ; };
cache_dir() { out $(cache_home) "/$program_command" ; };
config_dir() { out $(config_home) "/$program_command" ; };
runtime_dir() { out $(runtime_home) "/$program_command" ; };
temp_dir() { out $(temp_home "$program_command"); };


### Configuration

# If you want to use config files for your whitelist or blacklist,
# then edit these files as you like, with one SSID name per line.
whitelist_file=$(config_dir)"/whitelist.txt"
blacklist_file=$(config_dir)"/blacklist.txt" 


### Utilties

airport_ssid(){
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | sed -n 's/^ *SSID: //p' | grep '.'
}


### Domain Driven Design

power_source_ok(){
    pmset -g ps | grep  -qm1 "Now drawing from 'AC Power'" 
}

battery_charge_ok(){
    pmset -g batt | grep -qm1 'InternalBattery-0 .*100%;'
}

processor_load(){
    sysctl -n vm.loadavg | cut -d' ' -f4
}

processor_cpus(){
    sysctl -n hw.physicalcpu
}

processor_load_ok(){
    [ $(int $(processor_load)) -lt $(processor_cpus) ]
}

connection_ssid_ok(){
    airport_ssid > /dev/null
}

ssid_whitelist_blacklist_ok(){
    ssid=$(airport_ssid)

    if [ -r "$whitelist_file" ]; then 
        grep -qFxm1 "$ssid" "$whitelist_file" ||
            err "because there's a whitelist file but the SSID isn't in it: $whitelist_file $ssid" && exit 33
    fi

    if [ -r "$blacklist_file" ]; then
        grep -qFxm1 "$ssid" "$blacklist_file" &&
            err "because there's a blacklist file and the SSID is in it: $blacklist_file $ssid" && exit 34
    fi

}


### Main

power_source_ok || err "The power source needs to be AC power" && exit 20
battery_charge_ok || err "The battery charge needs to be full" && exit 21
processor_load_ok || err "The processesor load needs to be lower" && exit 22
connection_ssid_ok || err "The connection needs to have a SSID" && exit 30

ssid_ok
ssid_whitelist_blacklist_ok
exit 0
