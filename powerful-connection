#!/bin/bash
set -euf
. "$(dirname "$(readlink -f "$0")")/unix-shell-script-kit"

## Program Tracking ##

program_command="poweful-connection"
program_version="2.0.0"
program_updated="2023-11-25T01:22:49Z"
program_license="GPL-2.0 or GPL-3.0 or contact for custom"
program_contact="Joel Parker Henderson (joel@joelparkerhenderson.com)"
program_variant="$program_command version $program_version updated $program_updated"

## Help Function ##

help(){
cat << DOC
This macOS script determines if we have a "powerful connection".

The phrase "powerful connection" is our nickname for when our laptop
is fully powered up, and has a good wireless connection suitable for
significant networking, such as downloading big files or streaming data.

Syntax:

    powerful-connection


## Details

This script runs these checks:

  * The computer is running on AC power.
  * The battery is fully charged.
  * The CPU has available processing cycles.
  * The WiFi is working and is connected to a SSID.
  * The SSID accept list succeeds.
  * The SSID reject list succeeds.


## Ideas

We use this script for optionally running large network jobs.
For example, we use a daily job that checks for a powerful connection,
and if so, then the job downloads any available software updates.

We use this script as a way to check if we should run streaming.
For example, we use this script to do a check when a user signs in:
if the user has a powerful connection, then we launch video streaming.


## Exit codes

  * 0: success
  * 2x: power issue
  * 20: computer power is not plugged in
  * 21: battery power is not fully charged
  * 22: processing power is not sufficient
  * 3x: connection issue
  * 30: ssid unavailable
  * 31: ssid accept list exists, and ssid is not in it
  * 32: ssid reject list exists, and ssid is in in


## Configuration

Create these two files:

    ~/.config/powerful-connecton/acceptlist.txt
    ~/.config/powerful-connecton/rejectlist.txt

Add any SSID names that you want to either list.

Add each SSID name on its own line.


## Cron

We like using the 'cron' command to schedule recurring jobs.

For example, each night we check if we have powerful wifi, 
and if so, then we upgrade our system software and apps.

Example crontab lines:

    0 0 * * * powerful-connection && nice softwareupdate --install --all
    0 1 * * * powerful-connection && nice brew upgrade --cleanup
    0 2 * * * powerful-connection && nice npm update -g

Details:

  * We use the 'nice' command to run the job at lower priority.

  * We use the 'softwareupdate' command to update macOS.

  * We use the 'brew' command to manage many of our software tools.


## References

This script is related to these repositories:

  * https://github.com/sixarm/airport-ssid
  * https://github.com/sixarm/hostinfo-commands
  * https://github.com/sixarm/pmset-commands
  * https://github.com/sixarm/ssid-powerful
  * https://github.com/sixarm/sysctl-commands
  * https://github.com/updatecommand/update


## Disclaimers

  * This script is suitable for demonstration purposes.
  * There is no warranty, express or implied.
  * Use at your own risk.
  * Your mileage may vary. 


## Tracking

  * Command: $program_command
  * Version: $program_version
  * Updated: $program_updated
  * License: $program_license
  * Contact: $program_contact
DOC
}

command_exists_or_die pmset
command_exists_or_die sysctl

### Configuration

config_dir="$(user_dir config)"

# If you want to use config files for your acceptlist or rejectlist,
# then edit these files as you like, with one SSID name per line.
ssid_accept_list_file="$config_dir/ssid-accept-list.txt"
ssid_reject_list_file="$config_dir/ssid-reject-list.txt" 


### Utilties

airport_ssid(){
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | sed -n 's/^ *SSID: //p' | grep '.'
}

### Domain Driven Design

power_source_ok(){
    pmset -g ps | grep  -qm1 "Now drawing from 'AC Power'" 
}

battery_charge_ok(){
    pmset -g batt | grep -qm1 'InternalBattery-0 .*100%;'
}

processor_load(){
    sysctl -n vm.loadavg | cut -d' ' -f4
}

processor_cpus(){
    sysctl -n hw.physicalcpu
}

processor_load_ok(){
    load="$(int "$(processor_load)")"
    cpus="$(int "$(processor_cpus)")"
    [ "$load" -lt "$cpus" ]
}

connection_ssid_ok(){
    airport_ssid > /dev/null
}

connection_ssid_list_ok(){
    ssid=$(airport_ssid)

    if [ -r "$ssid_accept_list_file" ]; then 
        grep -qFxm1 "$ssid" "$ssid_accept_list_file" ||
            die 31 "There's a SSID accept list file but the SSID isn't in it: $ssid_accept_list_file $ssid"
    fi

    if [ -r "$ssid_reject_list_file" ]; then
        grep -qFxm1 "$ssid" "$ssid_reject_list_file" &&
            die 32 "There's an SSID reject list file and the SSID is in it: $ssid_reject_list_file $ssid"
    fi
}


### Main

power_source_ok || die 20 "The power source needs to be AC power"
battery_charge_ok || die 21 "The battery charge needs to be full"
processor_load_ok || die 22 "The processesor load needs to be lower"
connection_ssid_ok || die 30 "The connection needs to have a SSID"
connection_ssid_list_ok
exit 0
